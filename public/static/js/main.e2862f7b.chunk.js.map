{"version":3,"sources":["members.js","add_member.js","App.js","serviceWorker.js","index.js"],"names":["GET_MEMBER","gql","MembersView","useQuery","fetchPolicy","loading","error","data","type","style","margin","message","read_name","map","i","index","width","border","padding","key","username","password","ADD_MEMBER","MembersADD","React","useState","set_name","set_password","useMutation","variables","add_name","display","value","allowClear","placeholder","onChange","e","target","onClick","client","ApolloClient","uri","fetchOptions","mode","App","view","set_view","Helmet","charSet","rel","href","textAlign","height","background","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ibAMA,IAAMA,EAAaC,IAAH,KASHC,EAAc,WAAM,IAAD,EACKC,YAASH,EACxC,CAACI,YAAc,iBADTC,EADoB,EACpBA,QAASC,EADW,EACXA,MAAOC,EADI,EACJA,KAIxB,OAAKF,EAAiB,kBAAC,IAAD,CAAMG,KAAK,UAAWC,MAAO,CAACC,OAAQ,gBACvDJ,EAAc,MAAN,OAAaA,EAAMK,QAAnB,QAEN,oCACDJ,EAAKK,UAAUC,KAAI,SAACC,EAAEC,GAAH,OACrB,wBAAIN,MAAO,CAACO,MAAM,IAAIN,OAAO,YAAYO,OAAO,iBAAiBC,QAAS,IAAKC,IAAKJ,GAC9E,sCAAaD,EAAEM,SAAf,KACA,0CAAgBN,EAAEO,gB,gPCrBhC,IAAMC,EAAarB,IAAH,KAQHsB,EAAa,WAAM,IAAD,EACEC,IAAMC,SAAS,IADjB,mBACpBL,EADoB,KACVM,EADU,OAEMF,IAAMC,SAAS,IAFrB,mBAEpBJ,EAFoB,KAEVM,EAFU,OAGNC,YAAYN,EAAW,CACpCO,UAAW,CAACT,SAAUA,EAAUC,SAAUA,KAD1CS,EAHmB,oBAOvB,OAAQ,kBAAC,IAAD,CAAMrB,MAAO,CAACsB,QAAQ,eAAeb,QAAS,GAAGR,OAAO,kBAAkBO,OAAO,mBACtF,kBAAC,IAAD,CAAOe,MAASZ,EACfa,YAAU,EACVzB,KAAK,OACLC,MAAO,CAACO,MAAM,KACdkB,YAAY,UACZC,SAAU,SAACC,GAAD,OAAKV,EAASU,EAAEC,OAAOL,UAGlC,kBAAC,IAAD,CAAOA,MAASX,EACfY,YAAU,EACVzB,KAAK,WACLC,MAAO,CAACO,MAAM,IAAIN,OAAO,UACzBwB,YAAY,cACZC,SAAU,SAACC,GAAD,OAAKT,EAAaS,EAAEC,OAAOL,UAEtC,kBAAC,IAAD,CAAQM,QAAS,kBAAIR,KAAYtB,KAAK,UAAUC,MAAO,CAACO,MAAM,MAA9D,S,SCzBLuB,EAAS,IAAIC,IAAa,CAC9BC,IAHU,qCAIVC,aAAc,CACZC,KAAM,UA2BKC,EAvBH,WAAO,IAAD,EACQpB,IAAMC,UAAS,GADvB,mBACVoB,EADU,KACJC,EADI,KAEhB,OACE,kBAAC,IAAD,CAAgBP,OAAQA,GACtB,kBAACQ,EAAA,OAAD,KACE,0BAAMC,QAAQ,UACd,0CACA,0BAAMC,IAAI,YAAYC,KAAK,+BAE7B,yBACEzC,MAAO,CAAC0C,UAAU,SAAUC,OAAQ,IACpCC,WAAW,6EAGZR,EAAO,kBAAC,EAAD,MAAkB,kBAAC,EAAD,MAAe,6BACzC,kBAAC,IAAD,CAAQP,QAAS,kBAAIQ,GAAUD,IAAQrC,KAAK,UAAUC,MAAO,CAACO,MAAM,MAChE6B,EAAqB,aAAf,mBCvBIS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e2862f7b.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport  gql  from 'graphql-tag';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport { Icon } from 'antd';\r\n\r\nconst GET_MEMBER = gql`\r\nquery {\r\n  read_name {\r\n    _id\r\n    username\r\n    password\r\n  }\r\n}\r\n`;\r\nexport const MembersView = () =>{\r\n    const { loading, error, data } = useQuery(GET_MEMBER,\r\n      {fetchPolicy : \"network-only\"}\r\n    );\r\n\r\n    if ( loading ) return <Icon type=\"loading\"  style={{margin: \"100px auto\" }}/>\r\n    if ( error ) return `<p>${error.message}</p>`;\r\n\r\n    return <>\r\n        { data.read_name.map((i,index) => \r\n        <h3 style={{width:300,margin:\"10px auto\",border:\"1px solid #000\",padding: 10}} key={index}>\r\n              <span >name:{i.username};</span>\r\n              <span>password:{i.password}</span>\r\n        </h3>\r\n        )}\r\n        </>\r\n   \r\n};","import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport  gql  from 'graphql-tag';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { Form , Input, Button } from 'antd';\r\n\r\nconst ADD_MEMBER = gql`\r\n mutation($username: String, $password: String) {\r\n  add_name(username: $username, password: $password) {\r\n    username\r\n    password\r\n  }\r\n}\r\n`;\r\nexport const MembersADD = () =>{\r\n    const [username, set_name] = React.useState('');\r\n    const [password, set_password] = React.useState('');\r\n    const [ add_name ] = useMutation(ADD_MEMBER,{\r\n            variables: {username: username, password: password}\r\n    } );\r\n    \r\n        return  <Form style={{display:\"inline-block\",padding: 10,margin:\"100px auto 20px\",border:\"1px solid #ccc\"}}>\r\n           <Input value = {username}\r\n            allowClear\r\n            type=\"text\"\r\n            style={{width:150}}           \r\n            placeholder=\"My name\"\r\n            onChange={(e)=>set_name(e.target.value)}\r\n           />\r\n         \r\n           <Input value = {password}\r\n            allowClear\r\n            type=\"password\"\r\n            style={{width:150,margin:\"0 10px\"}}               \r\n            placeholder=\"My password\"\r\n            onChange={(e)=>set_password(e.target.value)}\r\n           />\r\n           <Button onClick={()=>add_name()} type=\"primary\" style={{width:150}} >\r\n               add\r\n           </Button>  \r\n         </Form>     \r\n              \r\n   \r\n   \r\n};","import React from 'react';\nimport 'antd/dist/antd.css';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { MembersView } from './members';\nimport { MembersADD } from './add_member';\nimport { Button } from 'antd';\nimport { Helmet } from 'react-helmet';\n\n\nconst uri = \"https://graphql1909.herokuapp.com/\";\n//const uri= \"http://localhost:5001\";\nconst client = new ApolloClient({\n  uri, \n  fetchOptions: {\n    mode: 'cors',\n  },\n});\n\nconst App = () => {\n const [view, set_view] = React.useState(false);\n  return (\n    <ApolloProvider client={client}>\n      <Helmet>\n        <meta charSet=\"utf-8\" />\n        <title>My site</title>\n        <link rel=\"canonical\" href=\"http://mysite.com/example\" />\n      </Helmet>\n      <div \n        style={{textAlign:\"center\", height: 800,\n        background:\"url(https://graphql19.herokuapp.com/image/one.jpg) center/100% no-repeat\"\n        }}\n      >\n      {view ? <MembersView /> : <MembersADD />}<br/>\n      <Button onClick={()=>set_view(!view)}  type=\"primary\" style={{width:300}}>\n        {!view? 'View members':'Add member'}\n      </Button>\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}